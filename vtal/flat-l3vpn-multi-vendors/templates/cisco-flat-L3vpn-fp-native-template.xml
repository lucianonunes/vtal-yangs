<?xml version="1.0" encoding="UTF-8"?>
<config-template xmlns="http://tail-f.com/ns/config/1.0">
  <devices xmlns="http://tail-f.com/ns/ncs">
    <device>
      <name>{access-pe}</name>
      <?set DEVICE_NAME={string(access-pe)}?>
      <?set DEFAULT_INTF_DESC='T-SDN Interface'?>
      <?set GLOBAL_RD_ENABLED='false'?>
      <?save-context service?>
      <?set-root-node {/cisco-flat-L3vpn-fp-internal:cfp-configurations}?>
      <?if {/global-rd-enabled}?>
        <?set GLOBAL_RD_ENABLED='true'?>
      <?end?>
      <?switch-context service?>
      <config>
        <?set EXPORT_POLICY_NAME={vrf/vrf-definition}?>
        <?if {sr-te/odn/export-route-policy-name}?>
          <?set EXPORT_POLICY_NAME={sr-te/odn/export-route-policy-name}?>
        <?end?>
        <?set IMPORT_POLICY_NAME={vrf/vrf-definition}?>
        <?if {sr-te/odn/import-route-policy-name}?>
          <?set IMPORT_POLICY_NAME={sr-te/odn/import-route-policy-name}?>
        <?end?>
        <?set EXPORT_RPL_NAME_IPV4={concat("SET_COLORv4_", string($EXPORT_POLICY_NAME))}?>
        <?set EXPORT_RPL_NAME_IPV6={concat("SET_COLORv6_", string($EXPORT_POLICY_NAME))}?>
        <?set IMPORT_RPL_NAME_IPV4={concat("SET_COLORv4_", string($IMPORT_POLICY_NAME))}?>
        <?set IMPORT_RPL_NAME_IPV6={concat("SET_COLORv6_", string($IMPORT_POLICY_NAME))}?>
        <?set PASS_ALL={concat("route-policy ",  string('PASS_ALL'),string('pass\n'), "end-policy")}?>
        <interface-configurations xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg">
          <?set INTERFACE_NAME={if-type}{if-id}?>
          <?if {vlan-id}?>
            <?set INTERFACE_NAME={if-type}{if-id}.{vlan-id}?>
          <?end?>
          <interface-configuration>
            <active>act</active>
            <interface-name>{$INTERFACE_NAME}</interface-name>
            <shutdown tags="delete"/>
            <?set IF_DESC=''?>
            <?save-context service?>
            <?set-root-node {/devices}?>
            <?set IF_DESC={/device[name=$DEVICE_NAME]/config/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration[active='act'][interface-name=$INTERFACE_NAME]/description}?>
            <?switch-context service?>
            <?expand intf-description?>
            <interface-virtual when="{if-type='Loopback' or if-type='BVI'}" />
            <?if {vlan-id}?>
              <interface-mode-non-physical>default</interface-mode-non-physical>
              <vlan-sub-configuration xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-l2-eth-infra-cfg">
                <vlan-identifier>
                  <vlan-type>vlan-type-dot1q</vlan-type>
                  <first-tag>{vlan-id}</first-tag>
                </vlan-identifier>
              </vlan-sub-configuration>
            <?end?>
            <mtus when="{mtu!='' and if-type!='Loopback'}">
              <?if {vlan-id}?>
                <mtu>
                  <owner>sub_vlan</owner>
                  <mtu>{mtu}</mtu>
                </mtu>
              <?else?>
                <mtu when="{if-type!='BVI'}">
                  <owner>{if-type}</owner>
                  <mtu>{mtu}</mtu>
                </mtu>
                <mtu when="{if-type='BVI'}">
                  <owner>bvi</owner>
                  <mtu>{mtu}</mtu>
                </mtu>
              <?end?>
            </mtus>
            <vrf xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-infra-rsi-cfg">{vrf/vrf-definition}</vrf>
            <ipv4-network xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-io-cfg" when="{$IPV4_ADDR!=''}">
              <addresses>
                <primary>
                  <address>{$IPV4_ADDR}</address>
                  <netmask>{$IPV4_MASK}</netmask>
                </primary>
              </addresses>
            </ipv4-network>
            <ipv6-network xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ipv6-ma-cfg" when="{pe-ipv6-addr}">
              <addresses>
                <regular-addresses>
                  <?set IPV6_ADDRESS={substring-before(string(pe-ipv6-addr), '/')}?>
                  <?set IPV6_PREFIX_LENGTH={substring-after(string(pe-ipv6-addr), '/')}?>
                  <regular-address>
                    <address>{$IPV6_ADDRESS}</address>
                    <prefix-length>{$IPV6_PREFIX_LENGTH}</prefix-length>
                    <zone>0</zone>
                  </regular-address>
                </regular-addresses>
              </addresses>
            </ipv6-network>
          </interface-configuration>
          <?if {vlan-id}?>
            <interface-configuration>
              <active>act</active>
              <interface-name>{if-type}{if-id}</interface-name>
              <shutdown tags="delete"/>
              <?set IF_NAME={if-type}{if-id}?>
              <?set IF_DESC=''?>
              <?save-context service?>
              <?set-root-node {/devices}?>
              <?set IF_DESC={/device[name=$DEVICE_NAME]/config/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration[active='act'][interface-name=$IF_NAME]/description}?>
              <?switch-context service?>
              <?expand intf-description?>
            </interface-configuration>
          <?end?>
        </interface-configurations>
        <?if {if-type = 'BVI'}?>
          <?set BVI_INTERFACE_NAME={if-type}{if-id}?>
          <?set BRIDGE_DOMAIN={vrf/vrf-definition}?>
          <?foreach {l2-attachment-circuit}?>
            <?set INTERFACE_NAME={if-type}{if-id}?>
            <?if {vlan-id}?>
              <?set INTERFACE_NAME={if-type}{if-id}.{vlan-id}?>
            <?end?>
            <interface-configurations xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg">
              <interface-configuration>
                <active>act</active>
                <interface-name>{$INTERFACE_NAME}</interface-name>
                <shutdown tags="delete"/>
                <?set IF_DESC=''?>
                <?save-context service?>
                <?set-root-node {/devices}?>
                <?set IF_DESC={/device[name=$DEVICE_NAME]/config/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration[active='act'][interface-name=$INTERFACE_NAME]/description}?>
                <?switch-context service?>
                <?expand intf-description?>
                <mtus when="{mtu!=''}">
                  <?if {vlan-id}?>
                    <mtu>
                      <owner>sub_vlan</owner>
                      <mtu>{mtu}</mtu>
                    </mtu>
                  <?else?>
                    <mtu>
                      <owner>{if-type}</owner>
                      <mtu>{mtu}</mtu>
                    </mtu>
                  <?end?>
                </mtus>
                <?if {vlan-id}?>
                  <interface-mode-non-physical>l2-transport</interface-mode-non-physical>
                  <ethernet-service xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-l2-eth-infra-cfg">
                    <encapsulation>
                      <outer-tag-type>match-dot1q</outer-tag-type>
                      <outer-range1-low>{vlan-id}</outer-range1-low>
                    </encapsulation>
                    <rewrite when="{rewrite/ingress}">
                      <?if {rewrite/ingress/pop}?>
                        <rewrite-type when="{rewrite/ingress/pop = '1'}">pop1</rewrite-type>
                        <rewrite-type when="{rewrite/ingress/pop = '2'}">pop2</rewrite-type>
                      <?end ?>
                      <?if {rewrite/ingress/push}?>
                        <rewrite-type>push1</rewrite-type>
                        <outer-tag-type>match-dot1q</outer-tag-type>
                        <outer-tag-value>{rewrite/ingress/dot1q}</outer-tag-value>
                      <?end ?>
                      <?if {rewrite/ingress/translate}?>
                        <rewrite-type when="{rewrite/ingress/translate = '1-to-1'}">translate1to1</rewrite-type>
                        <outer-tag-type>match-dot1q</outer-tag-type>
                        <outer-tag-value>{rewrite/ingress/dot1q}</outer-tag-value>
                      <?end ?>
                    </rewrite>
                  </ethernet-service>
                <?else?>
                  <l2-transport xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-l2vpn-cfg">
                    <enabled/>
                  </l2-transport>
                <?end ?>
              </interface-configuration>
              <?if {vlan-id}?>
                <interface-configuration>
                  <active>act</active>
                  <interface-name>{if-type}{if-id}</interface-name>
                  <shutdown tags="delete"/>
                  <?set IF_NAME={if-type}{if-id}?>
                  <?set IF_DESC=''?>
                  <?save-context service?>
                  <?set-root-node {/devices}?>
                  <?set IF_DESC={/device[name=$DEVICE_NAME]/config/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration[active='act'][interface-name=$IF_NAME]/description}?>
                  <?switch-context service?>
                  <?expand intf-description?>
                </interface-configuration>
              <?end?>
            </interface-configurations>
            <l2vpn xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-l2vpn-cfg">
              <enable/>
              <database>
                <bridge-domain-groups>
                  <bridge-domain-group>
                    <name>{$BRIDGE_DOMAIN}</name>
                    <bridge-domains>
                      <bridge-domain>
                        <name>{$BRIDGE_DOMAIN}</name>
                        <bd-attachment-circuits>
                          <bd-attachment-circuit>
                            <name>{$INTERFACE_NAME}</name>
                          </bd-attachment-circuit>
                        </bd-attachment-circuits>
                      </bridge-domain>
                    </bridge-domains>
                  </bridge-domain-group>
                </bridge-domain-groups>
              </database>
            </l2vpn>
          <?end?>
          <l2vpn xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-l2vpn-cfg">
            <enable/>
            <database>
              <bridge-domain-groups>
                <bridge-domain-group>
                  <name>{$BRIDGE_DOMAIN}</name>
                  <bridge-domains>
                    <bridge-domain>
                      <name>{$BRIDGE_DOMAIN}</name>
                      <routed-interfaces>
                        <routed-interface>
                          <interface-name>{$BVI_INTERFACE_NAME}</interface-name>
                        </routed-interface>
                      </routed-interfaces>
                      <shutdown tags="delete"/>
                    </bridge-domain>
                  </bridge-domains>
                </bridge-domain-group>
              </bridge-domain-groups>
            </database>
          </l2vpn>
        <?end?>
        <vrfs xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-infra-rsi-cfg">
          <vrf>
            <vrf-name>{vrf/vrf-definition}</vrf-name>
            <create />
            <?if {vpn-id}?>
              <vpn-id>
                <vpn-oui  when="{$VPN_OUI!=''}">{$VPN_OUI}</vpn-oui>
                <vpn-index  when="{$VPN_INDEX!=''}">{$VPN_INDEX}</vpn-index>
              </vpn-id>
            <?end?>
            <?if {$GLOBAL_RD_ENABLED='true'}?>
              <?set AS_TYPE='as'?>
              <?set AS_XX=0?>
              <?set AS_YY=1?>
              <?set AS_INDEX=1?>
              <?set ADDRESS=''?>
              <?set ADDRESS_INDEX=''?>
              <?if {contains(string(route-distinguisher), '.')}?>
                <?set AS_TYPE='ip'?>
                <?set ADDRESS={substring-before(string(route-distinguisher), ':')}?>
                <?set ADDRESS_INDEX={substring-after(string(route-distinguisher), ':')}?>
              <?else?>
                <?set AS_TYPE='as'?>
                <?set VALUE={substring-before(string(route-distinguisher), ':')}?>
                <?set AS_XX={floor($VALUE div 65535)}?>
                <?set AS_YY={floor($VALUE mod 65535)}?>
                <?set AS_INDEX={substring-after(string(route-distinguisher), ':')}?>
              <?end?>
              <bgp-global xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-cfg">
                <?if {$AS_TYPE='as'}?>
                  <route-distinguisher when="{route-distinguisher}">
                    <type>as</type>
                    <as-xx>{$AS_XX}</as-xx>
                    <as>{$AS_YY}</as>
                    <as-index>{$AS_INDEX}</as-index>
                  </route-distinguisher>
                <?else?>
                  <route-distinguisher when="{route-distinguisher}">
                    <type>ipv4-address</type>
                    <address>{$ADDRESS}</address>
                    <address-index>{$ADDRESS_INDEX}</address-index>
                  </route-distinguisher>
                <?end?>
              </bgp-global>
            <?end?>
            <afs>
              <af when="{address-family/address-family='ipv4'}">
                <af-name>ipv4</af-name>
                <saf-name>unicast</saf-name>
                <topology-name>default</topology-name>
                <create />
                <bgp xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-cfg">
                  <?foreach {address-family[address-family='ipv4']/vpn-target}?>
                    <?set AS_TYPE='as'?>
                    <?set AS_XX=0?>
                    <?set AS_YY=1?>
                    <?set AS_INDEX=1?>
                    <?set ADDRESS=''?>
                    <?set ADDRESS_INDEX=''?>
                    <?if {contains(string(rt-value), '.')}?>
                      <?set AS_TYPE='ip'?>
                      <?set ADDRESS={substring-before(string(rt-value), ':')}?>
                      <?set ADDRESS_INDEX={substring-after(string(rt-value), ':')}?>
                    <?else?>
                      <?set AS_TYPE='as'?>
                      <?set VALUE={substring-before(string(rt-value), ':')}?>
                      <?set AS_XX={floor($VALUE div 65535)}?>
                      <?set AS_YY={floor($VALUE mod 65535)}?>
                      <?set AS_INDEX={substring-after(string(rt-value), ':')}?>
                    <?end?>
                    <import-route-targets when="{rt-type = 'import' or rt-type='both'}">
                      <route-targets>
                        <?expand native-asf-bgp-route-target?>
                      </route-targets>
                    </import-route-targets>
                    <export-route-targets when="{rt-type = 'export' or rt-type='both'}">
                      <route-targets>
                        <?expand native-asf-bgp-route-target?>
                      </route-targets>
                    </export-route-targets>
                  <?end?>
                  <export-route-policy when="{$EXPORT_COLOR_IPV4!=''}">{$EXPORT_RPL_NAME_IPV4}</export-route-policy>
                  <import-route-policy when="{$IMPORT_COLOR_IPV4!=''}">{$IMPORT_RPL_NAME_IPV4}</import-route-policy>
                </bgp>
              </af>
              <af when="{address-family/address-family='ipv6'}">
                <af-name>ipv6</af-name>
                <saf-name>unicast</saf-name>
                <topology-name>default</topology-name>
                <create />
                <bgp xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-cfg">
                  <?foreach {address-family[address-family='ipv6']/vpn-target}?>
                    <?set AS_TYPE='as'?>
                    <?set AS_XX=0?>
                    <?set AS_YY=1?>
                    <?set AS_INDEX=1?>
                    <?set ADDRESS=''?>
                    <?set ADDRESS_INDEX=''?>
                    <?if {contains(string(rt-value), '.')}?>
                      <?set AS_TYPE='ip'?>
                      <?set ADDRESS={substring-before(string(rt-value), ':')}?>
                      <?set ADDRESS_INDEX={substring-after(string(rt-value), ':')}?>
                    <?else?>
                      <?set AS_TYPE='as'?>
                      <?set VALUE={substring-before(string(rt-value), ':')}?>
                      <?set AS_XX={floor($VALUE div 65535)}?>
                      <?set AS_YY={floor($VALUE mod 65535)}?>
                      <?set AS_INDEX={substring-after(string(rt-value), ':')}?>
                    <?end?>
                    <import-route-targets when="{rt-type = 'import' or rt-type='both'}">
                      <route-targets>
                        <?expand native-asf-bgp-route-target?>
                      </route-targets>
                    </import-route-targets>
                    <export-route-targets when="{rt-type = 'export' or rt-type='both'}">
                      <route-targets>
                        <?expand native-asf-bgp-route-target?>
                      </route-targets>
                    </export-route-targets>
                  <?end?>
                  <export-route-policy when="{$EXPORT_COLOR_IPV6!=''}">{$EXPORT_RPL_NAME_IPV6}</export-route-policy>
                  <import-route-policy when="{$IMPORT_COLOR_IPV6!=''}">{$IMPORT_RPL_NAME_IPV6}</import-route-policy>
                </bgp>
              </af>
            </afs>
          </vrf>
        </vrfs>
        <bgp xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-cfg" when="{$AS_NO!=''}">
          <instance>
            <instance-name>default</instance-name>
            <?set AS_TYPE='as'?>
            <?set AS_XX=0?>
            <?set AS_YY=1?>
            <?set AS=1?>
            <?if {contains(string($AS_NO), '.')}?>
              <?set AS_XX={substring-before(string($AS_NO), '.')}?>
              <?set AS_YY={substring-after(string($AS_NO), '.')}?>
              <?set AS={($AS_XX * 65535) + AS_YY}?>
             <?else?>
              <?set AS_XX={floor($AS_NO div 65535)}?>
              <?set AS_YY={floor($AS_NO mod 65535)}?>
              <?set AS={$AS_NO}?>
            <?end?>
            <instance-as>
              <as>{$AS_XX}</as>
              <four-byte-as>
                <as>{$AS}</as>
                <bgp-running />
                <vrfs>
                  <vrf>
                    <vrf-name>{vrf/vrf-definition}</vrf-name>
                    <vrf-global>
                      <exists />
                      <?if {$GLOBAL_RD_ENABLED='false'}?>
                        <?if {route-distinguisher}?>
                          <?set AS_TYPE='as'?>
                          <?set AS_XX=0?>
                          <?set AS_YY=1?>
                          <?set AS_INDEX=1?>
                          <?set ADDRESS=''?>
                          <?set ADDRESS_INDEX=''?>
                          <?if {contains(string(route-distinguisher), '.')}?>
                            <?set AS_TYPE='ip'?>
                            <?set ADDRESS={substring-before(string(route-distinguisher), ':')}?>
                            <?set ADDRESS_INDEX={substring-after(string(route-distinguisher), ':')}?>
                          <?else?>
                            <?set AS_TYPE='as'?>
                            <?set VALUE={substring-before(string(route-distinguisher), ':')}?>
                            <?set AS_XX={floor($VALUE div 65535)}?>
                            <?set AS_YY={floor($VALUE mod 65535)}?>
                            <?set AS_INDEX={substring-after(string(route-distinguisher), ':')}?>
                          <?end?>
                          <?if {$AS_TYPE='as'}?>
                            <route-distinguisher when="{route-distinguisher}">
                              <type>as</type>
                              <as-xx>{$AS_XX}</as-xx>
                              <as>{$AS_YY}</as>
                              <as-index>{$AS_INDEX}</as-index>
                            </route-distinguisher>
                          <?else?>
                            <route-distinguisher when="{route-distinguisher}">
                              <type>ipv4-address</type>
                              <address>{$ADDRESS}</address>
                              <address-index>{$ADDRESS_INDEX}</address-index>
                            </route-distinguisher>
                          <?end?>
                        <?else?>
                          <route-distinguisher>
                            <type>auto</type>
                          </route-distinguisher>
                        <?end?>
                      <?end?>
                      <vrf-global-afs>
                        <vrf-global-af when="{address-family/address-family='ipv4' and vrf-definition!=''}">
                          <af-name>ipv4-unicast</af-name>
                          <enable />
                          <connected-routes when="{address-family[address-family='ipv4']/redistribute-connected}">
                            <default-metric>{address-family[address-family='ipv4']/metric}</default-metric>
                          </connected-routes>
                          <segment-routing when="{address-family[address-family='ipv4']/srv6}">
                            <srv6>
                              <enable/>
                              <srv6sid-allocation-mode>per-vrf</srv6sid-allocation-mode>
                              <locator-name>{address-family[address-family='ipv4']/srv6/locator-name}</locator-name>
                            </srv6>
                          </segment-routing>
                        </vrf-global-af>
                        <vrf-global-af when="{address-family/address-family='ipv6' and vrf-definition!=''}">
                          <af-name>ipv6-unicast</af-name>
                          <enable />
                          <connected-routes when="{address-family[address-family='ipv6']/redistribute-connected}">
                            <default-metric>{address-family[address-family='ipv6']/metric}</default-metric>
                          </connected-routes>
                          <segment-routing when="{address-family[address-family='ipv6']/srv6}">
                            <srv6>
                              <enable/>
                              <srv6sid-allocation-mode>per-vrf</srv6sid-allocation-mode>
                              <locator-name>{address-family[address-family='ipv6']/srv6/locator-name}</locator-name>
                            </srv6>
                          </segment-routing>
                        </vrf-global-af>
                      </vrf-global-afs>
                    </vrf-global>
                    <vrf-neighbors>
                      <vrf-neighbor when="{../ce-pe-prot/e-bgp/neighbor-ipv4!=''}">
                        <neighbor-address>{../ce-pe-prot/e-bgp/neighbor-ipv4}</neighbor-address>
                        <update-source-interface when="{update-source and not(update-source/sub-if-id)}">{update-source/if-type}{update-source/if-id}</update-source-interface>
                        <update-source-interface when="{update-source and update-source/sub-if-id}">{update-source/if-type}{update-source/if-id}.{update-source/sub-if-id}</update-source-interface>
                        <ebgp-multihop when="{ebgp-multihop}">
                          <max-hop-count>{ebgp-multihop/ttl-value}</max-hop-count>
                          <mpls-deactivation>{ebgp-multihop/mpls-deactivation}</mpls-deactivation>
                        </ebgp-multihop>
                        <remote-as>
                          <?set REMOTE_AS_XX=0?>
                          <?set REMOTE_AS_YY=1?>
                          <?if {contains(string(remote-as-ipv4), '.')}?>
                            <?set REMOTE_AS_XX={substring-before(string(remote-as-ipv4), '.')}?>
                            <?set REMOTE_AS_YY={substring-after(string(remote-as-ipv4), '.')}?>
                          <?else?>
                            <?set REMOTE_AS_XX={floor(remote-as-ipv4 div 65535)}?>
                            <?set REMOTE_AS_YY={floor(remote-as-ipv4 mod 65535)}?>
                          <?end?>
                          <as-xx>{$REMOTE_AS_XX}</as-xx>
                          <as-yy>{$REMOTE_AS_YY}</as-yy>
                        </remote-as>
                        <vrf-neighbor-afs>
                          <vrf-neighbor-af>
                            <af-name>ipv4-unicast</af-name>
                            <activate/>
                            <route-policy-in>PASS_ALL</route-policy-in>
                            <route-policy-out>PASS_ALL</route-policy-out>
                          </vrf-neighbor-af>
                        </vrf-neighbor-afs>
                      </vrf-neighbor>
                      <vrf-neighbor when="{../ce-pe-prot/e-bgp/neighbor-ipv6!=''}">
                        <neighbor-address>{../ce-pe-prot/e-bgp/neighbor-ipv6}</neighbor-address>
                        <update-source-interface when="{update-source and not(update-source/sub-if-id)}">{update-source/if-type}{update-source/if-id}</update-source-interface>
                        <update-source-interface when="{update-source and update-source/sub-if-id}">{update-source/if-type}{update-source/if-id}.{update-source/sub-if-id}</update-source-interface>
                        <ebgp-multihop when="{ebgp-multihop}">
                          <max-hop-count>{ebgp-multihop/ttl-value}</max-hop-count>
                          <mpls-deactivation>{ebgp-multihop/mpls-deactivation}</mpls-deactivation>
                        </ebgp-multihop>
                        <remote-as>
                          <?set REMOTE_AS_XX=0?>
                          <?set REMOTE_AS_YY=1?>
                          <?if {contains(string(remote-as-ipv6), '.')}?>
                            <?set REMOTE_AS_XX={substring-before(string(remote-as-ipv6), '.')}?>
                            <?set REMOTE_AS_YY={substring-after(string(remote-as-ipv6), '.')}?>
                          <?else?>
                            <?set REMOTE_AS_XX={floor(remote-as-ipv6 div 65535)}?>
                            <?set REMOTE_AS_YY={floor(remote-as-ipv6 mod 65535)}?>
                          <?end?>
                          <as-xx>{$REMOTE_AS_XX}</as-xx>
                          <as-yy>{$REMOTE_AS_YY}</as-yy>
                        </remote-as>
                        <vrf-neighbor-afs>
                          <vrf-neighbor-af>
                            <af-name>ipv6-unicast</af-name>
                            <activate/>
                            <route-policy-in>PASS_ALL</route-policy-in>
                            <route-policy-out>PASS_ALL</route-policy-out>
                          </vrf-neighbor-af>
                        </vrf-neighbor-afs>
                      </vrf-neighbor>
                    </vrf-neighbors>
                  </vrf>
                </vrfs>
              </four-byte-as>
            </instance-as>
          </instance>
        </bgp>
       </config>
    </device>
  </devices>
</config-template>
